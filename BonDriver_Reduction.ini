;設定
[Setting]

;TunerName (必須)
; チューナーの名前
TunerName=RDCT:Spinel_XXXX

;TunerPath (必須)
TunerPath=RDCT\BonDriver_Spinel_XXXX.dll

;TunerPath[0..n] 何個でも追加可能
; BonDriver 本体のパス (相対パス、またはフルパス)
; (この表記で記述した場合、TunerPath (連番ではない記述)は無効化される)
;TunerPath0=RDCT\BonDriver_Spinel_PT-T0.dll;RDCT\BonDriver_Spinel_PT-T1.dll
;TunerPath1=RDCT\BonDriver_Spinel_PT-S0.dll;RDCT\BonDriver_Spinel_PT-S1.dll

;TunerRetryDuration
; ひとつのチューナーのオープン処理に費やす最大再試行時間
; ※この時間内に、オープン処理が失敗した場合にオープン処理の再試行を繰り返す。
; (Default:1000) 1秒 [ミリ秒]
;TunerRetryDuration=0 ; 0=再試行しない

;ManageTunerMutex
; 使用しているチューナーをミューテックスで把握/管理/登録するかどうか
; 1 にすると BonDriver_RDCT を複数のアプリケーションで使用する場合にプロセス間
; を超えてチューナーが利用されているかどうか把握して管理/登録できるようになる。
; (※コンピュータ間を超えた把握はできない）
; ミューテックスの名前は拡張子とパスを除いたファイルプレフィックスになるので
; 複数のアプリケーションで TunerPath に指定する BonDriver を使い回す場合は、
; その BonDriver のファイル名を同じファイル名に統一すること。
; (Default:n) [y/n]
;ManageTunerMutex=y

;TunerMutexPrefix
; チューナーをミューテックスで管理/登録する場合のプレフィックス
; 実際のミューテックス名は、
;   "BonReduction_" + TunerMutexPrefix + チューナーファイルプレフィックス
; アプリケーションで選り分けるような目的での利用が可能。
; (Default:空文字列)
;TunerMutexPrefix=EDCB(Recording)_
;TunerMutexPrefix=TVTest(Viewing)_

;AvoidTunerMutex
; 使用しているチューナーをミューテックスで把握するかどうか
; 1 にすると BonDriver_RDCT を複数のアプリケーションで使用する場合にプロセス間
; を超えてチューナーが利用されているかどうか把握できるようになる。
; ManageTunerMutex と異なるところはチューナーが使用されているがどうか把握する
; だけで自身のミューテックスを登録しないところ。排他じゃないチューナーを使用
; する場合に排他のチューナーを避けるような目的での利用が可能。
; (※ ManageTunerMutex が有効な場合は、AvoidTunerMutex も必然的に有効になる)
; (Default:n) [y/n]
;AvoidTunerMutex=y

;TunerMutexAvoidPrefix
; チューナーをミューテックスで把握する場合のプレフィックス
; 実際のミューテックス名は、
;   "BonReduction_" + TunerMutexAvoidPrefix + チューナーファイルプレフィックス
; アプリケーションで選り分けるような目的での利用が可能。
; (※この項目が空文字列の場合は、TunerMutexAvoidPrefix は、空のプレフィックスで
;    はなく、TunerMutexPrefix と同じ値を保持する)
; (Default:空文字列) ※複数指定可
;TunerMutexAvoidPrefix=EDCB(Recording)_,TVTest(Viewing)_

;SpaceArrangement
; チューナー空間の羅列を SpaceArrangement に記述するとその記述された
; 順番通りにチューナー空間を並べ替えて表示することが可能となる
;（記述のないチューナー空間は自動的に最後尾に追記される）
;SpaceArrangement=CS110,BS,地上D(CATV),地上D,VHF

;SpaceConcat
; 複数のチューナー空間を一つに連結するかどうか
; (Default:n)  [y/n]
;SpaceConcat=y

;SpaceConcatName
; SpaceConcat が有効な場合にチューナー空間として表示する名前
; (Default:連結空間)
;SpaceConcatName=地デジ/CATV/VHF/BS/CS110

;FullLoad
; チューナーモジュールを事前に読み出して準備しておくかどうか
; yにするとパスに登録されている全てのチューナーモジュールの読み出しを
; このBonDriverが初期化される際に、一気に行うが、
; そのモジュール分のリソースを常に消費する副作用を伴う。
; メリットとしては、メインプロセスから全てのモジュールを事前に読込む為、
; モジュール初期化の失敗の可能性を極力抑えられる。
; ※ BonDriver_RDCTを数珠繋ぎにして使う場合、yを推奨。
; (Default:n) [y/n]
;FullLoad=y

;FullScan
; 初期化時にチューナーを開いてチャンネル情報を事前にスキャンしておくかどうか
; チューナーを開いてからチャンネル情報を列挙しないとチャンネル一覧をうまく取得
; できない特異なBonDriverを扱う場合、この値を y にすると解決するかもしれない。
; ※ .transit.txt にチャンネル遷移情報を記録する場合は、初回のみ(.transit.txt
;    ファイルが存在しない状態)スキャンされ、次回からはスキャン処理は省略され、
;    新たに記録された.transit.txtの遷移情報を元にチャンネル一覧が構築される。
; ※ SpaceArrangement の項目が空ではなかった場合、FullScan=y に強制される。
; (Default:n) [y/n]
;FullScan=y

;FullOpen
; 一度開いたチューナーを開きっぱなしにするかどうか
; yにするとチューナー間のチャンネル切り替えが高速になるが、
; 開いているチューナーの分だけリソースが浪費される。
; (Default:n) [y/n]
;FullOpen=y

;LazyOpen
; 実際にチューナーを使用する直前までチューナーを開いたことにして済ますかどうか
; nにするとアプリケーション側がOpenTuner()をコールした瞬間にチューナー本体を
; 開くようになるため、チューナーが正常に開けたかどうかをアプリケーション側が
; 正しく認識できるようになるが、WOL付のBonDriver_Spinelをラップする場合、
; 意図しないマジックパケットがターゲットPCに送信される可能性がアプリケーション
; の使い方によっては高くなってしまうことがある。
; ※ RecordTransit=n かつ FullScan=y の場合、LazyOpen=y に強制される。
; (Default:y) [y/n]
;LazyOpen=n

;ByteTuning
; 旧形式バイトサイズのチャンネル変更方式を有効にするかどうか
; チャンネル数の合計が256を超える場合の誤動作防止用スイッチ
; (Default:n) [y/n]
;ByteTuning=y

;RecordTransit
; .transit.txt ファイルに遷移を記録するかどうか
; (Default:y) [y/n]
;RecordTransit=n

;SaveCurrent
; 現行のチャンネルチューニングの状態をiniに記録するかどうか
; (Default:y) [y/n]
;SaveCurrent=n

;CheckOpening
; 現行のチューナーが開かれているかどうか個々の処理を開始する前に
; BonTuner::IsTunerOpening() を利用して毎回チェックし、閉じられていれば自動で
; ドライバを再オープンし直すかどうか
; (Default:n) [y/n]
;CheckOpening=y

;ChannelKeeping
; 現行のチューナーのチャンネルが何らかの理由で他のチャンネルに変更された場合に
; 元のチャンネルに自動で選局し直すかどうか
; ※ スペアのチューナーが存在する場合は、スペアを先に優先して試行される。
; ※ スペアも含めたすべてのチューナーで選局が失敗した場合、チャンネル情報は
;    最後に試行したチューナーのものに置き換えられる（諦める）。
; ※ チャンネルスキャン時にこの値を n にしておかないと、副作用が発生する模様。
; (Default:n) [y/n]
;ChannelKeeping=y

;SignalAsBitrate
; 現行のチューナーのシグナルをストリームの転送量に置き換えるかどうか
; ※ 有効にすると、シグナルdB欄に実際に処理した転送量MbpsがdBとして表示される
; (Default:n) [y/n]
;SignalAsBitrate=y

;MMTimerEnabled
; マルチメディアタイマーを有効にしてシステムの割込み間隔の精度を高めるかどうか
; ※ 有効にすると、タイマーの精度が向上するが、システム全体に影響を及ぼす
; (Default:n) [y/n]
;MMTimerEnabled=y

;MMTimerPeriod
; マルチメディアタイマーの割込み間隔精度
; ※ Windows10 2004 以降の環境だと 9 辺りが最小有効精度でそれ以下の値を指定する
;    と逆に割込み効率が落ちる謎の副作用が発生する模様
; (Default:10) [msec] ※Windowsの既定値が大体15くらいなのでコレより少ない値推奨
;MMTimerPeriod=5
;MMTimerPeriod=1

;HRTimerEnabled
;  ハイレゾﾘｭｰｼｮﾝタイマーを有効にしてシステムの割込み間隔の精度を高めるかどうか
; ※ 有効にすると、タイマーの精度が向上するが、システム全体に影響を及ぼす
; (Default:n) [y/n]
;HRTimerEnabled=y

;AsyncTSEnabled
; 非同期TSストリームのバッファリングを行うかどうか
;(Default:n) [y/n]
;AsyncTSEnabled=y

;非同期TSストリームのバッファリング設定項目::
;  一回に送受信する容量： AsyncTSPacketSize (バイト）
;  初期バッファ容量： AsyncTSPacketSize × AsyncTSQueueNum (バイト）
;  最大バッファ容量： AsyncTSPacketSize × AsyncTSQueueMax (バイト）
;  初期バッファ充填容量： AsyncTSPacketSize × AsyncTSQueueStart (バイト）
;   (※この容量までバッファが充填されるのを待ってから転送を開始する)
;  バッファ充填のボーダー： AsyncTSPacketSize × AsyncTSEmptyBorder (バイト）
;   (※この値よりバッファの空きキューが少なくなると自動で充填を開始する)
;  オーバーラップ保障容量： AsyncTSPacketSize × AsyncTSEmptyLimit (バイト）
;   (※この値よりバッファの空きキューが少なくなるとアプリケーションが現在その
;      空領域のデータを読み取り進行中だとRDCTが判断し、データの上書きが行われ
;      ないように細工してその読み取り中のデータを保障する)
;  バッファ監視間隔： AsyncTSRecvThreadWait (ミリ秒単位)
;   (※この値を大きくすると負荷が少なくなるものの、チャンネル切替や終了時に
;      時間を取られることがある弊害を伴う)
;(以下はすべてデフォルトの値)
;AsyncTSPacketSize=128K ; 128KiB
;AsyncTSQueueNum=20
;AsyncTSQueueMax=100
;AsyncTSQueueStart=5
;AsyncTSEmptyBorder=10
;AsyncTSEmptyLimit=5
;AsyncTSRecvThreadWait=50

;AsyncTSRecvThreadPriority
; 非同期TSストリームスレッドの優先順位
; (Default: THREAD_PRIORITY_HIGHEST)
;AsyncTSRecvThreadPriority=THREAD_PRIORITY_TIME_CRITICAL  ; リアルタイム
;AsyncTSRecvThreadPriority=THREAD_PRIORITY_HIGHEST        ; 高い
;AsyncTSRecvThreadPriority=THREAD_PRIORITY_ABOVE_NORMAL   ;  ↑
;AsyncTSRecvThreadPriority=THREAD_PRIORITY_NORMAL         ; 通常
;AsyncTSRecvThreadPriority=THREAD_PRIORITY_BELOW_NORMAL   ;  ↓
;AsyncTSRecvThreadPriority=THREAD_PRIORITY_LOWEST         ; 低い
;AsyncTSRecvThreadPriority=THREAD_PRIORITY_IDLE           ; アイドル時のみ

;AsyncTSFifoThreadPriority
; 非同期TSバッファリングFIFOアロケーションスレッドの優先順位
; (Default: THREAD_PRIORITY_HIGHEST)
;AsyncTSFifoThreadPriority=THREAD_PRIORITY_TIME_CRITICAL  ; リアルタイム
;AsyncTSFifoThreadPriority=THREAD_PRIORITY_HIGHEST        ; 高い
;AsyncTSFifoThreadPriority=THREAD_PRIORITY_ABOVE_NORMAL   ;  ↑
;AsyncTSFifoThreadPriority=THREAD_PRIORITY_NORMAL         ; 通常
;AsyncTSFifoThreadPriority=THREAD_PRIORITY_BELOW_NORMAL   ;  ↓
;AsyncTSFifoThreadPriority=THREAD_PRIORITY_LOWEST         ; 低い
;AsyncTSFifoThreadPriority=THREAD_PRIORITY_IDLE           ; アイドル時のみ

;MagicEnabled
; チューナーモジュールをロードする前にマジックパケットを送信するかどうか
;(Default:n) [y/n]
;MagicEnabled=y

;マジックパケットの送信先情報::
;  MagicIPEndPoint : ブロードキャスト送信のターゲットIPエンドポイント
;  MagicMACAddress : ウェイクアップターゲットのLANボードMACアドレス
;  MagicDefaultPort : ブロードキャスト送信のターゲット宛先デフォルトポート
;  ※ MagicIPEndPoint と MagicMACAddress は、複数セミコロン(;)で指定可能
;(以下はサンプル)
;MagicIPEndPoint=192.168.1.255;192.168.0.255:7;255.255.255.255
;MagicMACAddress=00:1A:2B:3C:4D:5E;00:2A:B3:87:5E:14;A0-B1-C2-D3-E4-F5
;MagicDefaultPort=9

;MagicSleep
; マジックパケット送信直後の待機時間 (ミリ秒単位)
;   ※この待機時間が過ぎたあとにモジュールをロードする処理が開始される
;(Default:0)
;MagicSleep=10000

;現行
[Current]
